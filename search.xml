<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React生成组件快捷方式</title>
      <link href="/2019/12/05/idea%E7%94%9F%E6%88%90react%E7%BB%84%E4%BB%B6%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
      <url>/2019/12/05/idea%E7%94%9F%E6%88%90react%E7%BB%84%E4%BB%B6%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="最近在使用idea发现生成react组件的快捷方式，写下文档加深印象。"><a href="#最近在使用idea发现生成react组件的快捷方式，写下文档加深印象。" class="headerlink" title="最近在使用idea发现生成react组件的快捷方式，写下文档加深印象。"></a>最近在使用idea发现生成react组件的快捷方式，写下文档加深印象。</h2><ul><li>rcc + tab键 - - 用ES6模块系统创建一个React组件类</li><li>rccp + tab键 - - 创建一个带有PropTypes和ES6模块系统的React组件类</li><li>rcfc + tab键 - - 创建一个带有PropTypes和所有生命周期方法以及ES6模块系统的React组件类</li><li>rcjc + tab键 - - 用ES6模块系统创建一个React组件类（无导出）</li><li>rdp + tab键 - - 快速生成defaultProps</li><li>rpc + tab键 - - 用PropTypes和ES6 moudle系统创建一个React纯组件类</li><li>rrc + tab键 - - 创建一个连接到redux的React组件类</li><li>rrdc + tab键 - - 创建一个通过dispatch连接到redux的React组件类</li><li>rsc + tab键 - - 创建没有PropTypes和ES6模块系统的无状态React组件</li><li>rscp + tab键 - - 创建有PropTypes和ES6模块系统的无状态React组件</li><li>rsf + tab键 - - 以命名函数的形式创建无状态的React组件，不使用PropTypes</li><li>rsfp + tab键 - - 使用PropTypes将无状态的React组件作为命名函数创建</li><li>rsi + tab键 - - 创建无状态的React组件，不使用PropTypes和ES6模块系统，但使用隐式返回和道具</li><li>rwwd + tab键 - - 在没有导入的情况下，在ES6模块系统中创建一个有构造函数、空状态、proptypes和导出的React组件类。(主要用于React时，proptype由webpack提供插件提供)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备忘 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 布局</title>
      <link href="/2019/09/14/css%E5%B8%83%E5%B1%80/"/>
      <url>/2019/09/14/css%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="display-与-Visibility"><a href="#display-与-Visibility" class="headerlink" title="display 与 Visibility"></a>display 与 Visibility</h2><pre><code>隐藏一个元素可以通过把display属性设置为&quot;none&quot;，或把visibility属性设置为&quot;hidden&quot;。    但是请注意，这两种方法会产生不同的结果。  visibility:hidden可以隐藏某个元素，但隐藏的元素仍需占用与未隐藏之前一样的空间。    从名字可以看出Visibility是是否可见，display是隐藏。</code></pre><h3 id="display其他属性"><a href="#display其他属性" class="headerlink" title="display其他属性"></a>display其他属性</h3><table><thead><tr><th align="center">值</th><th>描述</th></tr></thead><tbody><tr><td align="center">none</td><td>此元素不会被显示。</td></tr><tr><td align="center">block</td><td>此元素将显示为块级元素，此元素前后会带有换行符。</td></tr><tr><td align="center">inline</td><td>默认。此元素会被显示为内联元素，元素前后没有换行符。</td></tr><tr><td align="center">inline-block</td><td>行内块元素。（CSS2.1 新增的值）</td></tr><tr><td align="center">list-item</td><td>此元素会作为列表显示。</td></tr></tbody></table><h2 id="Position"><a href="#Position" class="headerlink" title="Position"></a>Position</h2><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><pre><code>HTML 元素的默认值，即没有定位，遵循正常的文档流对象。静态定位的元素不会受到 top, bottom, left, right影响。</code></pre><h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><pre><code>元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动：top：距离顶部left：距离左边right：距离邮编bottom：距离底部</code></pre><h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><pre><code>relative 定位相对定位元素的定位是相对其正常位置。原来占有的空间不改变。定位属性和fixed相同；</code></pre><h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><pre><code>绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于&lt;html&gt;:定位属性同上；不同于fixed在于fixed相对于窗口，absolute相对于父元素。</code></pre><h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h2><pre><code>粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed定位之间切换。  它的行为就像position:relative;而当页面滚动超出目标区域时，它的表现就像position:fixed;  它会固定在目标位置。元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。  这个特定阈值指的是 top, right, bottom 或 left 之一，换言之，指定top,right,bottom或left四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</code></pre><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><pre><code>Flex 是 Flexible Box的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性，任何元素都可以使用。![flex布局](/images/flex.png &quot;flex布局&quot;)容器默认存在两根轴：  水平的主轴（main axis）和垂直的交叉轴（cross axis）。  主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；  交叉轴的开始位置叫做cross start，结束位置叫做cross end。  项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</code></pre><h3 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">flex-direction </span><br><span class="line">    //决定主轴的排列方向</span><br><span class="line">    row（默认值）：主轴为水平方向，起点在左端。</span><br><span class="line">    row-reverse：主轴为水平方向，起点在右端。</span><br><span class="line">    column：主轴为垂直方向，起点在上沿。</span><br><span class="line">    column-reverse：主轴为垂直方向，起点在下沿。</span><br><span class="line">    </span><br><span class="line">flex-wrap </span><br><span class="line">    //默认情况下，项目都排在一条线（又称&quot;轴线&quot;）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</span><br><span class="line">    nowrap：默认值不换行</span><br><span class="line">    wrap：第一行在最上方，依次向下2，3...</span><br><span class="line">    wrap-reverse：第一行在最下方，以此向上为2，3...行</span><br><span class="line">    </span><br><span class="line">flex-flow</span><br><span class="line">    //flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。顺序是先flex-direction后flex-wrap</span><br><span class="line"></span><br><span class="line">justify-content</span><br><span class="line">    //justify-content属性定义了项目在主轴上的对齐方式</span><br><span class="line">    flex-start（默认值）：左对齐</span><br><span class="line">    flex-end：右对齐</span><br><span class="line">    center： 居中</span><br><span class="line">    space-between：两端对齐，项目之间的间隔都相等。</span><br><span class="line">    space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</span><br><span class="line"></span><br><span class="line">align-items</span><br><span class="line">    //align-items属性定义项目在交叉轴上如何对齐。</span><br><span class="line">    flex-start：交叉轴的起点对齐。</span><br><span class="line">    flex-end：交叉轴的终点对齐。</span><br><span class="line">    center：交叉轴的中点对齐。</span><br><span class="line">    baseline: 项目的第一行文字的基线对齐。</span><br><span class="line">    stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</span><br><span class="line">    </span><br><span class="line">align-content</span><br><span class="line">    //align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</span><br><span class="line">    flex-start：与交叉轴的起点对齐。</span><br><span class="line">    flex-end：与交叉轴的终点对齐。</span><br><span class="line">    center：与交叉轴的中点对齐。</span><br><span class="line">    space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</span><br><span class="line">    space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span><br><span class="line">    stretch（默认值）：轴线占满整个交叉轴。</span><br></pre></td></tr></table></figure><h3 id="flex-item属性"><a href="#flex-item属性" class="headerlink" title="flex item属性"></a>flex item属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">order </span><br><span class="line">    //order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。相同按照定义顺序排序</span><br><span class="line">flex-grow</span><br><span class="line">    //flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。  </span><br><span class="line">    //如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span><br><span class="line">flex-shrink</span><br><span class="line">    //flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span><br><span class="line">    //如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</span><br><span class="line">flex-basis</span><br><span class="line">    //flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。</span><br><span class="line">    //浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</span><br><span class="line">    //它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</span><br><span class="line">flex</span><br><span class="line">    //flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</span><br><span class="line">align-self</span><br><span class="line">    //align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</span><br></pre></td></tr></table></figure><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><pre><code>设置float属性left或right如果元素左或右有空间时元素间会换到一行。清除浮动clear:both|left|right;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
          <category> css布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React组件通信</title>
      <link href="/2019/09/05/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/09/05/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>最近在学习react过程中，接触到父子组件通信问题，写下文档加深印象。</p><h2 id="子组件调用父组件"><a href="#子组件调用父组件" class="headerlink" title="子组件调用父组件"></a>子组件调用父组件</h2><p><strong>下面是一个登陆的例子 是子组件调用父组件方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Login extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">    handlerLogin(props) &#123;</span><br><span class="line">        let account = this.refs.account.value;</span><br><span class="line">        let password = this.refs.password.value</span><br><span class="line">        let obj = this;</span><br><span class="line">        axios.post(&apos;/api/v1/login&apos;, &#123;</span><br><span class="line">            account:account,</span><br><span class="line">            password:password,</span><br><span class="line">        &#125;).then(function (res) &#123;</span><br><span class="line">            if (res.data.code === 0) &#123;</span><br><span class="line">                //通过父组建传过来的parent属性调用父组件方法</span><br><span class="line">                //这个parent就是父组件的this引用</span><br><span class="line">                obj.props.parent.changePages(&apos;news&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;React.Fragment&gt;</span><br><span class="line">                &lt;form id=&apos;loginForm&apos;&gt;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        &lt;label&gt;账号：&lt;/label&gt;&lt;input type=&apos;text&apos; name=&apos;account&apos; ref=&apos;account&apos; value=&apos;admin&apos;/&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        &lt;label&gt;密码：&lt;/label&gt;&lt;input type=&apos;text&apos; name=&apos;password&apos; ref=&apos;password&apos; value=&apos;123456&apos;/&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;button type=&apos;button&apos; onClick=&#123;this.handlerLogin.bind(this)&#125;&gt;登陆&lt;/button&gt;</span><br><span class="line">                &lt;/form&gt;</span><br><span class="line">            &lt;/React.Fragment&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>下面是父组件代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Home extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            page: &apos;home&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changePages = (pageName) =&gt; &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            page: pageName</span><br><span class="line">        &#125;);</span><br><span class="line">        this.render();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        if (this.state.page === &apos;home&apos;) &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;!-- parent 给子组件传入一个当前this引用，子组件就可以通过props.parent调用 当前的方法--&gt;</span><br><span class="line">                &lt;Login parent=&#123;this&#125;/&gt;</span><br><span class="line">            );</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;React.Fragment&gt;</span><br><span class="line">                    &lt;ProjectTitle&gt;&lt;/ProjectTitle&gt;</span><br><span class="line">                    &lt;NewsBody/&gt;</span><br><span class="line">                &lt;/React.Fragment&gt;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我这个是一个登陆切换页面的例子，所以传的是一个引用，也可以传值不传引用，也可以只传一个方法的引用供子组件调用如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    if (this.state.page === &apos;home&apos;) &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;Login changePages=&#123;this.changePages&#125;&#125;/&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">let obj = this;</span><br><span class="line">axios.post(&apos;/api/v1/login&apos;, data).then(function (res) &#123;</span><br><span class="line">    if (res.data.code === 0) &#123;</span><br><span class="line">        obj.props.changePages(&apos;news&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="父组件调用子组件"><a href="#父组件调用子组件" class="headerlink" title="父组件调用子组件"></a>父组件调用子组件</h2><p><strong>父组件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Home extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    onRef(ref) &#123;</span><br><span class="line">        //添加属性为子组件的引用</span><br><span class="line">        this.projectTitle = ref;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    changeProjectTitle = (titleStr) =&gt; &#123;</span><br><span class="line">        //通过子组件引用调用子组件方法</span><br><span class="line">        this.projectTitle.changeTitle(titleStr);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">            return (</span><br><span class="line">                &lt;React.Fragment&gt;</span><br><span class="line">                    &lt;!-- 这里是调用父组件的OnRef方法绑定子组件的引用 --&gt;</span><br><span class="line">                    &lt;ProjectTitle onRef=&#123;this.onRef.bind(this)&#125;&gt;&lt;/ProjectTitle&gt;</span><br><span class="line">                    &lt;NewsBody/&gt;</span><br><span class="line">                &lt;/React.Fragment&gt;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子组件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class ProjectTitle extends React.Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.props.onRef(this)</span><br><span class="line">        this.state = &#123;</span><br><span class="line">            titleStr: &apos;新闻系统&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //自组件需要提供夫组件想要调用的方法</span><br><span class="line">        changeTitle(titleStr) &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            titleStr: titleStr</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&apos;titleDiv&apos;&gt;</span><br><span class="line">                &lt;span className=&apos;titleDivSpan&apos;&gt;&#123;this.state.titleStr&#125;&lt;/span&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备忘 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云购买域名映射到github.io</title>
      <link href="/2019/09/02/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E6%98%A0%E5%B0%84%E5%88%B0github.io/"/>
      <url>/2019/09/02/%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E6%98%A0%E5%B0%84%E5%88%B0github.io/</url>
      
        <content type="html"><![CDATA[<ol><li>先去阿里云买个域名，备案</li><li>进入阿里云控制台-&gt;域名-&gt;找到刚购买的域名点击管理-&gt;域名解析配置如图三的记录</li><li>在‘博客系统’source目录下添加CNAME文件 里面写入 你新购买的域名<br><img src="/images/aliyundomainname1.jpg" alt="图1" title="图1"><br><img src="/images/aliyundomainname2.jpg" alt="图2" title="图2"><br><img src="/images/aliyundomainname3.jpg" alt="图3" title="图3"></li><li>访问新域名看看是否成功。可能会有延迟</li></ol>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 - 搭建博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建博客 </tag>
            
            <tag> 备忘 </tag>
            
            <tag> hexo </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中next主题配置</title>
      <link href="/2019/09/02/hexoNext%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/02/hexoNext%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文使用的是hexo中的next主题，读者可以根据自己的喜好去选择其他主题</p><blockquote><p>分享一个知乎主题推荐 <a href="https://www.zhihu.com/question/24422335" target="_blank" rel="noopener">https://www.zhihu.com/question/24422335</a></p></blockquote><h2 id="下载next主题"><a href="#下载next主题" class="headerlink" title="下载next主题"></a>下载next主题</h2><blockquote><p>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p></blockquote><p>将 themes/next 中cp或者移动到博客地址中的themes/下</p><h2 id="配置博客菜单与设置主题"><a href="#配置博客菜单与设置主题" class="headerlink" title="配置博客菜单与设置主题"></a>配置博客菜单与设置主题</h2><p>修改博客根目录下的_config.yml 这里是用的yml所以注意你的缩进<br>找到 theme 修改为</p><blockquote><p>theme: next</p></blockquote><h2 id="配置next主题"><a href="#配置next主题" class="headerlink" title="配置next主题"></a>配置next主题</h2><h3 id="菜单配置"><a href="#菜单配置" class="headerlink" title="菜单配置"></a>菜单配置</h3><p>ps：这次配置的是 /themes/next/_config.yml中的内容不要和博客根目录下的_config.yml之前的混淆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:&lt;br&gt;</span><br><span class="line">  home: / || home                          //首页</span><br><span class="line">  archives: /archives/ || archive          //归档</span><br><span class="line">  categories: /categories/ || th           //分类</span><br><span class="line">  tags: /tags/ || tags                     //标签</span><br><span class="line">  about: /about/ || user                   //关于</span><br><span class="line">  #schedule: /schedule/ || calendar        //日程表</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap        //站点地图</span><br><span class="line">  #commonweal: /404/ || heartbeat          //公益404</span><br></pre></td></tr></table></figure><pre><code>看看你需要哪个菜单就把哪个取消注释打开就行了；下文会涉及到如何配置这些页面关于后面的格式以archives: /archives/ || archive为例：‘||’ 之前的/archives/表示标题“归档”，关于标题的格式可以去themes/next/languages/zh-Hans.yml中参考或修改‘||’ 之后的archive表示图标</code></pre><p>PS：Next主题所有的图标都来自<br><a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">Font Awesome</a>。</p><h3 id="修改布局风格"><a href="#修改布局风格" class="headerlink" title="修改布局风格"></a>修改布局风格</h3><pre><code>在themes/next/_config.yml中修改配置，可以自己试试喜欢哪种风格</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><h3 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h3><pre><code>侧栏设置包括：侧栏位置、侧栏显示与否、文章间距、返回顶部按钮等等</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line"># Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）</span><br><span class="line">  position: left        //靠左放置</span><br><span class="line">  #position: right      //靠右放置</span><br><span class="line"></span><br><span class="line"># Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）</span><br><span class="line">  #display: post        //默认行为，在文章页面（拥有目录列表）时显示</span><br><span class="line">  display: always       //在所有页面中都显示</span><br><span class="line">  #display: hide        //在所有页面中都隐藏（可以手动展开）</span><br><span class="line">  #display: remove      //完全移除</span><br><span class="line"></span><br><span class="line">  offset: 12            //文章间距（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  b2t: false            //返回顶部按钮（只对Pisces | Gemini两种风格有效）</span><br><span class="line"></span><br><span class="line">  scrollpercent: true   //返回顶部按钮的百分比</span><br></pre></td></tr></table></figure><h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><p>打开 主题配置文件 找到Sidebar Avatar字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar: /images/touxiang.jpg</span><br></pre></td></tr></table></figure><pre><code>这是头像的路径，只需把你的头像命名为header.jpg（随便命名）放入themes/next/source/images中或放在你的博客/source/images下效果是一样的（建议因为这样你以后换主题不必要重新cp图片文件），将avatar的路径名改成你的头像名就OK啦！</code></pre><h3 id="设置RSS"><a href="#设置RSS" class="headerlink" title="设置RSS"></a>设置RSS</h3><p>1、先安装 hexo-generator-feed 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>2、打开 博客根目录下的_config.yml 找到Extensions在下面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># RSS订阅</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: &apos; &apos;</span><br></pre></td></tr></table></figure><p>3、打开/themes/next/_config.yml文件 找到rss，设置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h3 id="添加分类模块"><a href="#添加分类模块" class="headerlink" title="添加分类模块"></a>添加分类模块</h3><p>1、新建一个分类页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>2、你会发现你的source文件夹下有了categorcies/index.md，打开index.md文件将title设置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-08-30 12:20:50</span><br><span class="line">comments: false                 //设置不能评论 后面会涉及到</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>3、打开 主题配置文件 找到menu，将categorcies取消注释(之前已经做过)</p><p>4、把文章归入分类只需在文章的顶部标题下方添加categories字段，即可自动创建分类名并加入对应的分类中<br>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: 分类测试文章标题</span><br><span class="line">categories: 分类名</span><br></pre></td></tr></table></figure><h3 id="添加标签模块"><a href="#添加标签模块" class="headerlink" title="添加标签模块"></a>添加标签模块</h3><p>1、新建一个标签页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>2、你会发现你的source文件夹下有了tags/index.md，打开index.md文件将title设置为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-08-30 12:27:28</span><br><span class="line">type: &apos;tags&apos;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>3、打开 /themes/next/_config.ymls 找到menu，将tags取消注释</p><p>4、把文章添加标签只需在文章的顶部标题下方添加tags字段，即可自动创建标签名并归入对应的标签中<br>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 标签测试文章标题</span><br><span class="line">tags: </span><br><span class="line">  - 标签1</span><br><span class="line">  - 标签2</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h3 id="添加关于模块"><a href="#添加关于模块" class="headerlink" title="添加关于模块"></a>添加关于模块</h3><p>1、新建一个关于页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure><p>2、你会发现你的source文件夹下有了about/index.md，打开index.md文件即可编辑关于你的信息，可以随便编辑。</p><p>3、打开 /themes/next/_config.yml 找到menu，将about取消注释</p><h3 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h3><p>1、安装 hexo-generator-searchdb 插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>2、打开 /themes/next/_config.yml 找到Extensions在下面添加</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>3、打开 /themes/next/_config.yml 找到Local search，将enable设置为true</p><h3 id="侧边栏设置-1"><a href="#侧边栏设置-1" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h3><p>侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。 两者配置均在 主题配置文件 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Social links</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/your-user-name</span><br><span class="line">  Twitter: https://twitter.com/your-user-name</span><br><span class="line">  微博: http://weibo.com/your-user-name</span><br><span class="line">  豆瓣: http://douban.com/people/your-user-name</span><br><span class="line">  知乎: http://www.zhihu.com/people/your-user-name</span><br><span class="line">  # 等等</span><br></pre></td></tr></table></figure><p>设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Social Icons</span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  # Icon Mappings</span><br><span class="line">  GitHub: github</span><br><span class="line">  Twitter: twitter</span><br><span class="line">  微博: weibo</span><br></pre></td></tr></table></figure><p>友情链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># title</span><br><span class="line">links_title: Links</span><br><span class="line">links:</span><br><span class="line">  MacTalk: http://macshuo.com/</span><br><span class="line">  Title: http://example.com/</span><br></pre></td></tr></table></figure><h3 id="腾讯友情404页面"><a href="#腾讯友情404页面" class="headerlink" title="腾讯友情404页面"></a>腾讯友情404页面</h3><p>腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！效果如下 <a href="http://www.ixirong.com/404.html" target="_blank" rel="noopener">http://www.ixirong.com/404.html</a></p><p>使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class="line">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class="line">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="添加版权声明"><a href="#添加版权声明" class="headerlink" title="添加版权声明"></a>添加版权声明</h3><p>在themes/next/_config.yml中修改配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Declare license on posts</span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  license: CC BY-NC-SA 3.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/</span><br></pre></td></tr></table></figure><h3 id="配置页面访问量"><a href="#配置页面访问量" class="headerlink" title="配置页面访问量"></a>配置页面访问量</h3><p>使用LeanCloud作为服务后台，<br>先注册一个LeanCloud账号：<br>Leancloud官网<br>创建一个应用，名字随便<br>在应用中的存储中创建一个Class，名字叫做Counter, 权限设置为无限制:<br><img src="/images/leancloud.jpg" alt="leancloud"></p><p>在themes/next/_config.yml中修改配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Show number of visitors to each article.</span><br><span class="line"># You can visit https://leancloud.cn get AppID and AppKey.</span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: </span><br><span class="line">  app_key: </span><br><span class="line">  security: false</span><br><span class="line">  betterPerformance: false</span><br></pre></td></tr></table></figure><p>其中 app_id 和 app_key 在 LeanCloud 的设置 -&gt; 应用 Key 可以找到</p><h3 id="增加评论功能"><a href="#增加评论功能" class="headerlink" title="增加评论功能"></a>增加评论功能</h3><p>使用valine+LeanCloud增加评论功能。<br>在themes/next/_config.yml中修改配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Valine.</span><br><span class="line"># You can get your appid and appkey from https://leancloud.cn</span><br><span class="line"># more info please open https://valine.js.org</span><br><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: </span><br><span class="line">  appkey: </span><br><span class="line">  notify: false # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: 发挥您批判家的精神！ # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure><p>注意appid和appkey的名字需要和项目中的valine.swig文件中的配置一致。否则不会加载评论框的哦。<br>这里需要注意，为了安全和valine运行正常，需要在LeanCloud中增加安全域名：<br><img src="/images/leancloud2.jpg" alt="leancloud"><br>图中tblog的域名我自己在阿里云购买的，如果有兴趣可以看下篇分享。</p>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
          <category> 搭建博客 </category>
          
          <category> next主题配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建博客 </tag>
            
            <tag> 备忘 </tag>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 静态博客搭建</title>
      <link href="/2019/09/02/hexo%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/09/02/hexo%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol><li><p>准备node环境</p><blockquote><p>直接去官网下载安装就可以了 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>安装完成后运行<br>npm -v 查看是否安装正确</p></blockquote></li><li><p>准备git环境</p><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496</a><br>进入廖雪峰的网站有不同操作系统的git环境安装方法。</p></blockquote></li><li><p>准github pages</p><blockquote><p><a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a><br>根据url中的提示就可以在自己的github上搭建一个静态博客网站。</p></blockquote><h2 id="安装hexo插件"><a href="#安装hexo插件" class="headerlink" title="安装hexo插件"></a>安装hexo插件</h2></li></ol><p>在终端输入以下命令并按下回车键</p><blockquote><p>npm install -g hexo-cli</p></blockquote><h2 id="构建博客系统"><a href="#构建博客系统" class="headerlink" title="构建博客系统"></a>构建博客系统</h2><blockquote><p>hexo init [folder]<br>会出现以 [folder] 命名的文件夹</p></blockquote><blockquote><p>cd [folder] 进入文件夹</p></blockquote><blockquote><p>npm install 执行本条命令</p></blockquote><p>最后的项目文件夹结构如下图所示</p><p><img src="/images/struct.jpg" alt="项目文件结构图" title="项目结构图"></p><p>最后在 floder文件夹内执行</p><blockquote><p>hexo s</p></blockquote><p>在浏览器地址栏输入</p><blockquote><p><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> </p></blockquote><p>不出意外的情况下就会进入如下图所示的网站<br><img src="/images/shouyetest.jpg" alt="项目文件结构图" title="项目结构图"></p><h2 id="对hexo进行基础配置"><a href="#对hexo进行基础配置" class="headerlink" title="对hexo进行基础配置"></a>对hexo进行基础配置</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><blockquote><p>title: 标题<br>subtitle: 副标题<br>description: 描述<br>author: 作者<br>language: 语言（简体中文是zh-Hans）<br>timezone: 网站时区（Hexo 默认使用您电脑的时区，不用写）</p></blockquote><h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><blockquote><p>deploy:<br>   type: git<br>   repo: 填写上文githubPages仓库地址 可以是https url 也可以使用ssh方式进行git同步<br>   branch: master</p></blockquote><h3 id="git同步"><a href="#git同步" class="headerlink" title="git同步"></a>git同步</h3><blockquote><p>npm install hexo-deployer-git –save<br>git同步需要安装以上插件<br>git的同步方式 hexo clean &amp;&amp; hexo d<br>其余配置大家可以自己去挖掘。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 搭建博客 </category>
          
          <category> 搭建博客 </category>
          
          <category> hexo主题配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建博客 </tag>
            
            <tag> 备忘 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo操作</title>
      <link href="/2019/08/28/hello-world/"/>
      <url>/2019/08/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>first Hello World!</title>
      <link href="/2019/08/26/first/"/>
      <url>/2019/08/26/first/</url>
      
        <content type="html"><![CDATA[<h2 id="手撕java-HelloWorld！"><a href="#手撕java-HelloWorld！" class="headerlink" title="手撕java HelloWorld！"></a>手撕java HelloWorld！</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void main (String args[])&#123;</span><br><span class="line">    System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
